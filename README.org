* Download Manager

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Internal Utilities

** Better Default

#+begin_src emacs-lisp
  (setq-default
   ;; Ask before quit
   confirm-kill-emacs 'y-or-n-p
   inhibit-startup-screen t
   ;; Don't display comp warnings
   warning-suppress-log-types '((comp))
   ;; Don't create lockfiles
   create-lockfiles nil
   ;; prefer UTF8
   buffer-file-coding-system 'utf-8-unix
   default-file-name-coding-system 'utf-8-unix
   default-keyboard-coding-system 'utf-8-unix
   default-process-coding-system '(utf-8-unix . utf-8-unix)
   default-sendmail-coding-system 'utf-8-unix
   default-terminal-coding-system 'utf-8-unix
   ;; Add newline at bottom of file
   require-final-newline t
   enable-recursive-minibuffers t
   ;; Backup setups
   ;; We use temporary directory /tmp for backup files
   ;; More versions should be saved
   backup-directory-alist `((".*" . ,temporary-file-directory))
   auto-save-file-name-transforms `((".*" ,temporary-file-directory t))
   backup-by-copying t
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t
   ;; Skip prompt for xref find definition
   xref-prompt-for-identifier nil
   ;; Don't wait for keystrokes display
   echo-keystrokes 0.01
   ;; Disable margin for overline and underline
   overline-margin 0
   underline-minimum-offset 0
   ;; Allow resizing frame by pixels
   frame-resize-pixelwise t
   ;; Better scroll behavior
   mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil))
   mouse-wheel-progressive-speed nil
   ;; Disable copy region blink
   copy-region-blink-delay 0
   ;; Use short answer when asking yes or no
   read-answer-short t
   ;; Always follow link
   vc-follow-symlinks t
   ;; Use custom.el as custom file
   custom-file (expand-file-name "custom.el" user-emacs-directory)
   ;; Disable ring bell
   ring-bell-function 'ignore
   ;; Mouse yank at current point
   mouse-yank-at-point t
   ;; DWIM target for dired
   ;; Automatically use another dired buffer as target for copy/rename
   dired-dwim-target t
   ;; Use spaces instead of tab
   indent-tabs-mode nil
   ;; use system clipboard
   save-interprogram-paste-before-kill t
   ;; Don't echo multiline eldoc
   eldoc-echo-area-use-multiline-p nil)

  (global-subword-mode 1)

  (global-hl-line-mode t)

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Enhace Scroll

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode)
#+end_src

** Recent opening files

#+begin_src elisp
  (add-hook 'after-init-hook 'recentf-mode)
  (setq recentf-max-saved-items 300
        recentf-exclude '("\\.?cache"
                           ".cask"p
                           "url"
                           "COMMIT_EDITMSG\\'"
                           "bookmarks"
                           "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                           "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                           (lambda (file) (file-in-directory-p file package-user-dir))))
  (global-set-key (kbd "C-x C-r") 'consult-recent-file)
#+end_src

** Line number

#+begin_src elisp
  (add-hook 'after-init-hook 'global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

** IBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (setq ibuffer-expert t
        ibuffer-movement-cycle nil
        ibuffer-show-empty-filter-groups nil)

  (straight-use-package 'ibuffer-project)
  (add-hook 'ibuffer-hook
            (lambda ()
              (setq ibuffer-filter-groups (ibuffer-project-generate-filter-groups))))
#+end_src

** Better Delimitier

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
  (add-hook 'conf-mode-hook 'electric-pair-local-mode)

  (straight-use-package 'rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

  (add-hook 'after-init-hook 'show-paren-mode)
  (setq show-paren-when-point-inside-paren t
        show-paren-when-point-in-periphery t)
#+end_src

** Show Indent

#+begin_src emacs-lisp
  (straight-use-package 'highlight-indent-guides)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'column)
#+end_src

** Eshell

#+begin_src emacs-lisp
  (require 'eshell)
  (require 'em-smart)
  (setq eshell-where-to-jump 'begin
        eshell-review-quick-commands nil
        eshell-smart-space-goes-to-end t)

  (defun mu-eshell-toggle ()
    "Toggle a persistent eshell popup window."
    (interactive)
    (defun shell-delete-window (&optional win)
      "Delete WIN wrapper."
      (ignore-errors (delete-window win)))
    (if-let ((win (get-buffer-window "*eshell-popup*")))
        (if (eq (selected-window) win)
            ;; If users attempt to delete the sole ordinary window. silence it.
            (shell-delete-window)
          (select-window win))
      (let ((display-comint-buffer-action '(display-buffer-at-bottom
                                            (inhibit-same-window . nil)))
            (eshell-buffer-name "*eshell-popup*"))
        (other-window 1)
        (with-current-buffer (eshell)
          (add-hook 'eshell-exit-hook 'shell-delete-window nil t)))))

  (global-set-key (kbd "<f9>") 'mu-eshell-toggle)
#+end_src

** Better Commands

*** Repeat mode

#+begin_src elisp
  (add-hook 'after-init-hook 'repeat-mode)
  (setq repeat-exit-key (kbd "RET"))
#+end_src

* Editor enhance

** Searching

*** ISearch

#+begin_src elisp
  (setq isearch-lax-whitespace t
        isearch-regexp-lax-whitespace t
        isearch-allow-motion t
        isearch-motion-changes-direction t
        isearch-lazy-count t
        isearch-lazy-highlight t
        lazy-count-prefix-format "%s/%s "
        lazy-highlight-cleanup nil)
#+end_src

*** Grep

#+begin_src elisp
  (straight-use-package 'rg)
  (add-hook 'after-init-hook 'rg-enable-default-bindings)
#+end_src

** Delete Selcted Area

#+begin_src elisp
  (add-hook 'after-init-hook 'delete-selection-mode)
#+end_src

** Undo System

#+begin_src elisp
  (straight-use-package 'vundo)
#+end_src

** Paredit

#+begin_src elisp
  (straight-use-package 'paredit)
  (require 'paredit)
  (define-key paredit-mode-map (kbd "[") 'paredit-open-round)
  (define-key paredit-mode-map (kbd "(") 'paredit-open-square)
  (define-key paredit-mode-map (kbd "M-[") 'paredit-wrap-square)
  (define-key paredit-mode-map (kbd "M-{") 'paredit-wrap-curly)
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
#+end_src

** Cursor movement

#+begin_src elisp
  (straight-use-package 'avy)
  (global-set-key (kbd "M-g f") 'avy-goto-line)
  (global-set-key (kbd "M-g w") 'avy-goto-word-1)
  (global-set-key (kbd "M-g e") 'avy-goto-word-0)
  (global-set-key (kbd "C-c j") 'avy-resume)
#+end_src

** Windows Management

*** Windmove

#+begin_src elisp
  (add-hook 'after-init-hook 'windmove-default-keybindings)
#+end_src

*** Ace-window

#+begin_src elisp
  (straight-use-package 'ace-window)
  (with-eval-after-load "golden-ratio"
                        (add-to-list 'golden-ratio-extra-commands 'ace-window))
  (global-set-key (kbd "M-o") #'ace-window)
  (global-set-key (kbd "M-O") #'ace-swap-window)
  (global-set-key (kbd "C-x /") #'split-window-right)
  (global-set-key (kbd "C-x -") #'split-window-below)
#+end_src

*** Eyebrowse

#+begin_src elisp
  (straight-use-package '(eyebrowse :depth full))
  (eyebrowse-mode 1)
#+end_src

* UI

Disable extra utilities:

#+begin_src elisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Color theme.

#+begin_src elisp
  (straight-use-package 'doom-themes)
  (load-theme 'doom-one-light t)
  (doom-themes-org-config)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-visual-bell-config)
#+end_src

** Modeline
#+begin_src elisp
  (straight-use-package 'minions)
  (add-hook 'after-init-hook #'minions-mode)
#+end_src

** Fonts

#+begin_src elisp
  (set-frame-font "JetBrains Mono 13" nil t)
#+end_src

** Which-Key

#+begin_src emacs-lisp
  (straight-use-package 'which-key)
  (add-hook 'after-init-hook 'which-key-mode)
  (setq which-key-idle-delay 0.5
        which-key-add-column-padding 1)
#+end_src

** Golden Ratio

#+begin_src elisp
  (straight-use-package 'golden-ratio)

  (setq golden-ratio-auto-scale t)
  (golden-ratio-mode 1)
#+end_src

* Completions System

** Vertico

#+begin_src emacs-lisp
  (straight-use-package '(vertico :files (:defaults "extensions/*")))
  (straight-use-package 'orderless)

  (require 'vertico)

  (setq completion-styles '(orderless basic)
        completion-category-overrides
        '((file (styles basic partial-completion)))
        orderless-matching-styles
        '(orderless-literal
          orderless-prefixes
          orderless-initialism
          orderless-regexp
          orderless-flex                       ; Basically fuzzy finding
          ;; orderless-strict-leading-initialism
          ;; orderless-strict-initialism
          ;; orderless-strict-full-initialism
          ;; orderless-without-literal          ; Recommended for dispatches instead
          ))

  (vertico-mode 1)

  (straight-use-package 'vertico-posframe)
  (vertico-posframe-mode 1)
#+end_src

** Consult

#+begin_src emacs-lisp
  (straight-use-package 'consult)
  (global-set-key (kbd "C-x b") #'consult-buffer)
  (global-set-key (kbd "C-c f") #'consult-flymake)
  (global-set-key (kbd "C-c r") #'consult-ripgrep)
#+end_src

** Marginalia

#+begin_src elisp
  (straight-use-package 'marginalia)
  (marginalia-mode)
#+end_src

** Embark

#+begin_src elisp
  (straight-use-package 'embark)
  (straight-use-package 'embark-consult)

  (global-set-key (kbd "C-.") 'embark-act)
  (global-set-key (kbd "C-;") 'embark-diwm)
  (add-hook 'embark-collect-mode 'consult-preview-at-point-mode)
#+end_src

** Completion

#+begin_src emacs-lisp
  (straight-use-package 'corfu)
  (setq corfu-auto t
        corfu-quit-at-boundary nil
        corfu-quit-no-match t
        corfu-cycle t
        corfu-preselect 'prompt
        corfu-preview-current t)

  ;; tab and go
  (with-eval-after-load "corfu"
    (define-key corfu-map (kbd "TAB") 'corfu-next)
    (define-key corfu-map [tab] 'corfu-next)
    (define-key corfu-map [?\S-\t] 'corfu-previous)
    (define-key corfu-map [backtab] 'corfu-previous))

  (global-corfu-mode)

  (straight-use-package 'cape)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  #+end_src

* Dired

#+begin_src elisp
  (require 'dired)
  (setq dired-recursive-deletes 'always
        dired-recursive-copies 'always
        dired-auto-revert-buffer t
        dired-dwim-target t)

  (global-set-key (kbd "C-x D") #'dired-jump-other-window)
  (define-key dired-mode-map (kbd "C-c C-p") 'wdired-change-to-wdired-mode)
  (define-key dired-mode-map (kbd "C-c +")   'dired-create-empty-file)

  (add-hook 'dired-mode-hook 'dired-omit-mode)

  (defun dired-open-externally (&optional arg)
      "Open marked or current file in operating system's default application."
      (interactive "P")
      (dired-map-over-marks
       (consult-file-externally (dired-get-filename))
       arg))

  (straight-use-package 'dired+)
#+end_src

* Texting

** Ispell

#+begin_src elisp
  (setq ispell-program-name "hunspell")
#+end_src

** Org

#+begin_src elisp
  (add-hook 'org-mode-hook #'visual-line-mode)
  (add-hook 'org-mode-hook #'org-toggle-pretty-entities)
  (add-hook 'org-mode-hook #'flyspell-mode)
#+end_src

** TeX

#+begin_src elisp
  (straight-use-package 'auctex)

  (defun mu-tex-helper-mode ()
    (visual-line-mode 1)
    (flymake-mode 1)
    (flyspell-mode 1)
    (prettify-symbols-mode 1)
    (TeX-fold-mode 1))

  (add-hook 'LaTeX-mode-hook 'mu-tex-helper-mode)
  (add-hook 'plain-TeX-mode-hook 'mu-tex-helper-mode)

  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-source-correlate-mode t
        TeX-source-correlate-method 'synctex
        TeX-master nil
        TeX-engine 'xetex)
#+end_src

** Tempoel

#+begin_src elisp
  (straight-use-package 'tempel)
  (global-set-key (kbd "M-+") 'tempel-complete)
  (global-set-key (kbd "M-*") 'tempel-insert)

  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'conf-mode-hook 'tempel-setup-capf)
  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  (straight-use-package 'tempel-collection)
#+end_src

* Modal Editing

#+begin_src elisp
  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

  (straight-use-package 'meow)
  (require 'meow)
  (meow-setup)
  (meow-global-mode 1)
#+end_src

* Reader

** PDF

#+begin_src elisp
  (straight-use-package 'pdf-tools)
  ;; (pdf-tools-install)
  (add-hook 'pdf-tools-enabled-hook 'auto-revert-mode)
  (add-hook 'pdf-tools-enabled-hook (lambda () (display-line-numbers-mode -1)))
#+end_src

** EPUB

#+begin_src elisp
  (straight-use-package 'nov)
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src

* Programming

** Magit

#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (straight-use-package 'diff-hl)
  (straight-use-package 'smerge-mode)

  (autoload 'magit "magit" nil t)
  (autoload 'diff-hl-mode "diff-hl" nil t)
  (autoload 'diff-hl-dired-mode "diff-hl-dired" nil t)
  (autoload 'smerge-mode "smerge-mode" nil t)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'conf-mode-hook 'diff-hl-mode)
#+end_src

** Agda

#+begin_src emacs-lisp
  (straight-use-package
   '(agda-symbol-helper-mode
     :type git
     :host github
     :repo "erupmi/agda-symbol-helper-mode"))

  (when (executable-find "agda-mode")
    (load-file (let ((coding-system-for-read 'utf-8))
                 (shell-command-to-string "agda-mode locate")))
    (add-hook 'agda2-mode-hook 'agda-symbol-helper-mode)
    (global-set-key (kbd "C-c C-<return>") 'agda2-load))
#+end_src

** Common Lisp

#+begin_src elisp
  (straight-use-package 'sly)
  (setq inferior-lisp-program "sbcl")
  (add-hook 'sly-mode-hook 'paredit-mode)
#+end_src

** Coq

#+begin_src elisp
  (straight-use-package 'proof-general)

  (setq proof-splash-enable nil
        proof-three-window-enable t)
#+end_src

** OCaml

#+begin_src elisp
  (straight-use-package 'tuareg)

  (add-to-list 'auto-mode-alist '("\\.ml\\'" . tuareg-mode))
  (add-hook 'tuareg-mode-hook 'eglot-ensure)
#+end_src

** Haskell

#+begin_src elisp
  (straight-use-package 'haskell-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-hook 'haskell-mode-hook 'haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'eglot-ensure)
#+end_src

** Rust

#+begin_src elisp
  (straight-use-package 'cargo)

  (autoload 'cargo-minor-mode "cargo" nil t)
  (add-hook 'rust-ts-mode-hook 'cargo-minor-mode)

  (with-eval-after-load "cargo"
    (define-key cargo-process-mode-map (kbd "/") 'scroll-down)    (define-key cargo-process-mode-map (kbd "?") 'scroll-down-line)
    (define-key cargo-process-mode-map (kbd "@") 'scroll-up)
    (define-key cargo-process-mode-map (kbd "^") 'scroll-up-line)
    (define-key cargo-process-mode-map (kbd "\\") 'toggle-truncate-lines))

  (straight-use-package 'rust-mode)
  (with-eval-after-load "rust-mode"
    (add-hook 'rust-mode-hook 'cargo-minor-mode)
    (add-hook 'rust-mode-hook 'eglot-ensure))
#+end_src
